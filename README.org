This is a template for solving [[https://adventofcode.com/][Advent of Code]] in [[https://julialang.org/][Julia]].

* Using the template
If you just want to use the template without modifying anything, just run
#+begin_src sh
  ./generate-new-year
#+end_src
This will insert the name of the current year and your name (taken from git) everywhere it is needed.
It will also stage the removal of all template and generation files in git.
Simply
#+begin_src sh
  git commit
#+end_src
and you are ready to start committing your solutions.

** Workflow
The intended workflow is to use the Julia REPL.
Run
#+begin_src sh
  julia --project
#+end_src
and then
#+begin_src julia
  using AdventOfCode<year>.DayXX
#+end_src
to start working on the solution for day ~XX~ (where ~<year>~ matches that of your package).

The solutions for the day go in the functions ~star1~ and ~star2~ in the day's file (~src/DayXX.jl~).
These functions take an I/O stream as input, and by default read the standard input (you end any input you put in with ~Ctrl-d~).
If you want to input a string your warp it in an [[https://docs.julialang.org/en/v1/base/io-network/#Base.IOBuffer][IOBuffer]], and if you want to input the contents of a file your warp the name of the file with [[https://docs.julialang.org/en/v1/base/io-network/#Base.open][open]].

Most Advent of Code problems provide one or more hints.
Testing if your solution solves those hints can be automated by adding them to ~test_hints_star1~ and ~test_hints_star2~.
These functions are exported when you run ~using DayXX~, and are meant to be run directly from the REPL.

* Modifying the template
When experimenting with modifications, you can use
#+begin_src sh
  ./generate-new-year -s
#+end_src
to generate the necessary Julia files without deleting the templates and generation scripts.

If you want to change the default contents for each day's solution, modify ~src/Day01.jl~ and then use ~generate-day-files~ to create the rest of the day templates.
